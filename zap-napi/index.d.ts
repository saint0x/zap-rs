/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface JsRequest {
  method: string
  uri: string
  headers: Record<string, string>
  body?: any
  params: Record<string, string>
  query: Record<string, string>
}
export interface ResponseBody {
  type: string
  content: string
}
export interface JsResponse {
  status: number
  headers: Record<string, string>
  body?: ResponseBody
}
export interface ZapError {
  code: string
  details?: any
}
export interface RequestContext {
  id: string
  timestamp: number
  metadata: Record<string, unknown>
  state: Map<string, unknown>
}
export interface RouteParams {
  pathParams: Record<string, string>
  queryParams: Record<string, string>
}
export declare class Router {
  constructor()
  handle(request: JsRequest): JsResponse
  register(method: string, path: string, handler: (...args: any[]) => any): void
  get(path: string, handler: (...args: any[]) => any): void
  post(path: string, handler: (...args: any[]) => any): void
  put(path: string, handler: (...args: any[]) => any): void
  delete(path: string, handler: (...args: any[]) => any): void
}
